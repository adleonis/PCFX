// Generated by view binder compiler. Do not edit!
package org.pcfx.adapter.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.pcfx.adapter.android.R;

public final class ActivityConsentBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button consentAcceptBtn;

  @NonNull
  public final Button consentDeclineBtn;

  @NonNull
  public final TextView consentDescription;

  @NonNull
  public final TextView consentGrants;

  @NonNull
  public final Button consentStatusBtn;

  @NonNull
  public final TextView consentTitle;

  @NonNull
  public final Button regenerateKeyBtn;

  private ActivityConsentBinding(@NonNull ScrollView rootView, @NonNull Button consentAcceptBtn,
      @NonNull Button consentDeclineBtn, @NonNull TextView consentDescription,
      @NonNull TextView consentGrants, @NonNull Button consentStatusBtn,
      @NonNull TextView consentTitle, @NonNull Button regenerateKeyBtn) {
    this.rootView = rootView;
    this.consentAcceptBtn = consentAcceptBtn;
    this.consentDeclineBtn = consentDeclineBtn;
    this.consentDescription = consentDescription;
    this.consentGrants = consentGrants;
    this.consentStatusBtn = consentStatusBtn;
    this.consentTitle = consentTitle;
    this.regenerateKeyBtn = regenerateKeyBtn;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityConsentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityConsentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_consent, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityConsentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.consent_accept_btn;
      Button consentAcceptBtn = ViewBindings.findChildViewById(rootView, id);
      if (consentAcceptBtn == null) {
        break missingId;
      }

      id = R.id.consent_decline_btn;
      Button consentDeclineBtn = ViewBindings.findChildViewById(rootView, id);
      if (consentDeclineBtn == null) {
        break missingId;
      }

      id = R.id.consent_description;
      TextView consentDescription = ViewBindings.findChildViewById(rootView, id);
      if (consentDescription == null) {
        break missingId;
      }

      id = R.id.consent_grants;
      TextView consentGrants = ViewBindings.findChildViewById(rootView, id);
      if (consentGrants == null) {
        break missingId;
      }

      id = R.id.consent_status_btn;
      Button consentStatusBtn = ViewBindings.findChildViewById(rootView, id);
      if (consentStatusBtn == null) {
        break missingId;
      }

      id = R.id.consent_title;
      TextView consentTitle = ViewBindings.findChildViewById(rootView, id);
      if (consentTitle == null) {
        break missingId;
      }

      id = R.id.regenerate_key_btn;
      Button regenerateKeyBtn = ViewBindings.findChildViewById(rootView, id);
      if (regenerateKeyBtn == null) {
        break missingId;
      }

      return new ActivityConsentBinding((ScrollView) rootView, consentAcceptBtn, consentDeclineBtn,
          consentDescription, consentGrants, consentStatusBtn, consentTitle, regenerateKeyBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
