// Generated by view binder compiler. Do not edit!
package org.pcfx.adapter.android.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.pcfx.adapter.android.R;

public final class ActivityDebugExposureEventsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button backButton;

  @NonNull
  public final Button createTestEventButton;

  @NonNull
  public final LinearLayout eventsContainer;

  @NonNull
  public final TextView loadingText;

  private ActivityDebugExposureEventsBinding(@NonNull LinearLayout rootView,
      @NonNull Button backButton, @NonNull Button createTestEventButton,
      @NonNull LinearLayout eventsContainer, @NonNull TextView loadingText) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.createTestEventButton = createTestEventButton;
    this.eventsContainer = eventsContainer;
    this.loadingText = loadingText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityDebugExposureEventsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityDebugExposureEventsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_debug_exposure_events, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityDebugExposureEventsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_button;
      Button backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.create_test_event_button;
      Button createTestEventButton = ViewBindings.findChildViewById(rootView, id);
      if (createTestEventButton == null) {
        break missingId;
      }

      id = R.id.events_container;
      LinearLayout eventsContainer = ViewBindings.findChildViewById(rootView, id);
      if (eventsContainer == null) {
        break missingId;
      }

      id = R.id.loading_text;
      TextView loadingText = ViewBindings.findChildViewById(rootView, id);
      if (loadingText == null) {
        break missingId;
      }

      return new ActivityDebugExposureEventsBinding((LinearLayout) rootView, backButton,
          createTestEventButton, eventsContainer, loadingText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
